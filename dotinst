#!/usr/bin/env bash
# dotfiles install script.

set -eo pipefail

DOTPATH=$(realpath "$(dirname "$0")")

XDG_CONFIG_HOME="${HOME}/.config"
XDG_CACHE_HOME="${HOME}/.cache"
XDG_DATA_HOME="${HOME}/.local/share"
XDG_STATE_HOME="${HOME}/.local/state"

SRC_DIR="${DOTPATH}/src"
CACHE_DIR="${XDG_CACHE_HOME}/dotfiles"
DEPFILE_PATH="${CACHE_DIR}/deployed.cache"

dotfiles_logo='
    | |     | |  / _(_) |           
  __| | ___ | |_| |_ _| | ___  ___  
 / _` |/ _ \| __|  _| | |/ _ \/ __| 
| (_| | (_) | |_| | | | |  __/\__ \ 
 \__,_|\___/ \__|_| |_|_|\___||___/ 

https://github.com/RShirohara/dotfiles
Copyright (c) 2020-2021 Ray Shirohara
Licensed under the MIT license.
'

function convertto_homepath { 
    local source="$1"
    if [ "${source}" = "-"  ]; then
        source=$(cat -)
    fi

    echo -E "${source}" | sed -e "s#^${SRC_DIR}#${HOME}#g"
}

function convertto_dotpath {
    local source="$1"
    if [ "${source}" = "-" ]; then
        source=$(cat -)
    fi

    echo -E "${source}" | sed -e "s#^${HOME}#${SRC_DIR}#g"
}

function get_ostype {
    local os="unknown"

    if [[ "$(cat /proc/version)" =~ [Mm]icrosoft ]]; then
        os="wsl"
    else
        case "${OSTYPE}" in
            darwin*)
                os="osx"
                ;;
            "linux-android")
                os="android"
                ;;
            linux-*)
                os="linux"
                ;;
        esac
    fi

    echo "${os}"
}

function find_command {
    command -v "$@" &>/dev/null
}

function convertfrom_alternatefile {
    local path="$1"
    local parameter
    local score=0
    
    if [ "${path}" = "-" ]; then
        path=$(cat -)
    fi

    for file in ${path}; do
        # Get local
        # Get altenative parameters.
        parameter=$(basename "${file}" | sed -n "/##/p" | sed -r "s/^.+##//")

        # Check parameters.
        if [ -z "${parameter}" ]; then
            score=$((score + 1))
        else
            IFS="," read -ra fields <<< "$parameter"
            for field in "${fields[@]}"; do
                local type="${field%.*}"
                local value="${field#*.}"
                # Get default conditions
                if [[ "${type}" =~ ^(default)$ ]]; then 
                    score=$((score + 1))
                # Get variable conditions.
                elif [[ "${type}" =~ ^(os)$ ]]; then
                    if [ "${value}" = "$(get_ostype)" ]; then
                        score=$((score + 2))
                    else
                        score=0
                    fi
                fi
            done
        fi

        if [ ${score} -gt 0 ]; then
            echo "${file%##*}"
        fi
    done
}

function find_alternatefile {
    local path="$1"

    if [ "${path}" = "-" ]; then
        path=$(cat -)
    fi

    for file in $path; do
        if [ -n "$(convertfrom_alternatefile "${file}")" ]; then
            echo "${file}"
        fi
    done
}

function get_filelist {
    find "${SRC_DIR}" -type f,l | find_alternatefile -
}

function get_dirlist {
    find "${SRC_DIR}" -type d
}

function get_filecache {
    # Check cache exists.
    if [ ! -s "${DEPFILE_PATH}" ]; then
        return 1
    fi

    cat "${DEPFILE_PATH}"
}

function set_filecache {
    # Check directory exiskts.
    if [ ! -d "${CACHE_DIR}" ]; then
        mkdir -p "${CACHE_DIR}"
    fi

    get_filelist | 
        convertfrom_alternatefile - | 
        convertto_homepath - > "${DEPFILE_PATH}"
}

function remove_filecache {
    # Check cache exists.
    if [ -f "${DEPFILE_PATH}" ]; then
        rm -fv "${DEPFILE_PATH}"
    fi
}

function set_symlink {
    # Check target directory exists.
    for dir in $(get_dirlist | convertto_homepath -); do
        if [ ! -d "${dir}" ]; then
            mkdir -p "${dir}"
        fi
    done

    # Create symlinks
    for file in $(get_filelist); do
        local source="${file}"
        local target=$(convertfrom_alternatefile "${file}" | convertto_homepath -)
        ln -fnsv "${source}" "${target}"
    done
}

function remove_symlink {
    local target

    target=$(get_filecache | convertto_homepath -)
    if [ -z "${target}" ]; then
        target=$(get_filelist | convertto_homepath -)
    fi

    for file in ${target}; do
        rm -fv "${file}"
    done
}

function initialize_git {
    git submodule update --init --recursive
}

function initialize_nvim {
    nvim +PackerSync +qall
}

function initialize_zsh {
    # Check data directory exists
    if [ -d "${XDG_DATA_HOME}/zsh" ]; then
        mkdir -p "${XDG_DATA_HOME}/zsh"
    fi

    zsh -ilc "zinit update --all"
}

function usage {
    case "$1" in
        'list')
            cat << FIN
Usage:
    ./$(basename "$0") list [target]

Optional arguments:
    target      : target directory.
        - dot       : Under dotfiles directory formatted to fullpath.
        - home      : Under Home directory formatted to fullpath.
        - [default] : Under dotfiles source directory.
FIN
            ;;
        'deploy')
            cat << FIN
Usage:
    ./$(basename "$0") deploy
FIN
            ;;
        'clean')
            cat << FIN
Usage:
    ./$(basename "$0") clean
FIN
            ;;
        'init')
            cat <<FIN
Usage:
    ./$(basename "$0") init [target]

Optional arguments:
    target      : target command.
        - git       : git submodules
        - nvim      : packer.nvim
        - zsh       : zinit
FIN
            ;;
        ''|*)
            cat << FIN
${dotfiles_logo}
$(basename "$0") is a tool for deploy, clean, and initialize dotfiles.

Usage:
    ./$(basename "$0") [command] [...arguments]

Available commands:
    list        : show symlinks.
    deploy      : create symlinks to target directory.
    clean       : remove symlinks.
    init        : initialize.

For more details, see also: "./$(basename "$0") help [command]".
FIN
            ;;
    esac
}

function list {
    case "$1" in
        'home')
            get_filelist | convertfrom_alternatefile - | convertto_homepath -
            ;;
        *)
            get_filelist
            ;;
    esac
}

function deploy {
    set_filecache && set_symlink
}

function clean {
    remove_symlink && remove_filecache
}

function initialize {
    case "$1" in
        'git')
            initialize_git
            ;;
        'nvim')
            initialize_nvim
            ;;
        'zsh')
            initialize_zsh
            ;;
        '')
            initialize_git
            initialize_nvim
            initialize_zsh
            ;;
    esac
}

# Exec command.
if [ "$(basename "$0")" = "dotinst" ]; then
    command="$1"
    shift

    case "${command}" in
        'list')
            list "$@"
            ;;
        'deploy'|'install')
            deploy
            ;;
        'clean')
            clean
            ;;
        'init')
            initialize "$@"
            ;;
        'help'|*)
            usage "$@"
            ;;
    esac
fi
