#!/bin/bash
# dotfiles install script.

set -eo pipefail

DOTPATH=$(realpath $(dirname "$0"))

SRC_DIR="${DOTPATH}/src"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/dotfiles"
DEPFILE_PATH="${CACHE_DIR}/deployed.cache"

dotfiles_logo='
    | |     | |  / _(_) |           
  __| | ___ | |_| |_ _| | ___  ___  
 / _` |/ _ \| __|  _| | |/ _ \/ __| 
| (_| | (_) | |_| | | | |  __/\__ \ 
 \__,_|\___/ \__|_| |_|_|\___||___/ 

https://github.com/RShirohara/dotfiles
Copyright (c) 2020-2021 Ray Shirohara
Licensed under the MIT license.
'

function convertto_homepath() { 
    local source="$1"
    if [ -p /dev/stdin ]; then
        source=$(cat -)
    fi

    echo -nE "${source}" | sed -e "s#^${SRC_DIR}#${HOME}#g"
}

function convertto_relativepath() {
    local source="$1"
    if [ -p /dev/stdin ]; then
        source=$(cat -)
    fi

    echo -nE "${source}" | sed -e "s#^${SRC_DIR}/##g"
}

function get_dirlist() {
    local result=$(find "${SRC_DIR}" -type d)

    case "$1" in
        'dot')
            echo -E "${result}"
            ;;
        'home')
            echo -E "${result}" | convertto_homepath
            ;;
        *)
            echo -E "${result}" | convertto_relativepath
            ;;
    esac
}

function get_filelist() {
    local result=$(find "${SRC_DIR}" -type f,l)

    case "$1" in
        'dot')
            echo -E "${result}"
            ;;
        'home')
            echo -E "${result}" | convertto_homepath
            ;;
        *)
            echo -E "${result}" | convertto_relativepath
            ;;
    esac
}

function get_filecache() {
    # Check cache exists.
    if [ ! -f "${DEPFILE_PATH}"]; then
        return 1
    fi

    cat "${DEPFILE_PATH}"
}

function set_filecache() {
    # Check directory exiskts.
    if [ ! -d "${CACHE_DIR}" ]; then
        mkdir -p "${CACHE_DIR}"
    fi

    get_filelist home | tee "${DEPFILE_PATH}" > /dev/null
}

function initialize_git() {
    git submodule update --init --recursive
}

function initialize_vim() {
    vim +PlugUpdate +PlugClean +qall
}

function initialize_zsh() {
    bash -ic "zinit update --all; zinit delete --clean"
}

function usage() {
    case "$1" in
        'list')
            cat << FIN
Usage:
    ./$(basename "$0") list [target]

Optional arguments:
    target      : target directory.
        - dot       : Under dotfiles directory formatted to fullpath.
        - home      : Under Home directory formatted to fullpath.
        - [default] : Under dotfiles source directory.
FIN
            ;;
        'deploy')
            cat << FIN
Usage:
    ./$(basename "$0") deploy
FIN
            ;;
        'clean')
            cat << FIN
Usage:
    ./$(basename "$0") clean
FIN
            ;;
        'init')
            cat <<FIN
Usage:
    ./$(basename "$0") init [target]

Optional arguments:
    target      : target command.
        - git       : submodules
        - vim       : vim-plug
        - zsh       : zinit
FIN
            ;;
        ''|*)
            cat << FIN
${dotfiles_logo}
$(basename "$0") is a tool for deploy, clean, and initialize dotfiles.

Usage:
    ./$(basename "$0") [command] [...arguments]

Available commands:
    list        : show symlinks.
    deploy      : create symlinks to target directory.
    clean       : remove symlinks.
    init        : initialize.

For more details, see also: "./$(basename "$0") help [command]".
FIN
            ;;
    esac
}

function deploy() {
    # Check target directory exists.
    for dir in $(get_dirlist home); do
        if [ ! -d "${dir}" ]; then
            mkdir -p "${dir}"
        fi
    done

    set_filecache
    for file in $(get_filelist dot); do
        ln -fnsv "${file}" "$(dirname "${file}" | convertto_homepath)"
    done
}

function clean() {
    local target=$(get_filecache)
    if [ "$?" -eq 1 ]; then
        target=$(get_filelist home)
    fi

    for file in "${target}"; do
        rm -frv "${file}"
    done
}

function initialize() {
    case "$1" in
        'git')
            initialize_git
            ;;
        'vim')
            initialize_vim
            ;;
        'zsh')
            initialize_zsh
            ;;
        '')
            initialize_git
            initialize_vim
            initialize_zsh
            ;;
    esac
}


# Exec command.
if [ $(basename "$0") = "dotinst" ]; then
    command="$1"
    shift

    case "${command}" in
        'list')
            get_filelist "$@"
            ;;
        'deploy'|'install')
            deploy
            ;;
        'clean')
            clean
            ;;
        'init')
            initialize "$@"
            ;;
        'help'|*)
            usage "$@"
            ;;
    esac
fi
